# Note for the developer

=Content=
<wiki:toc max_depth="3" />

= Introduction =

This page provides information usefull for the developer.
  * Directory structure; 
  * Customizing the RDF Data access adding new wrappers;
  * Customizing the output;
  * Retrieving the instances on which to apply semantic similarity.

= Directory structure =
The code is organized in different directories:
  * *SSONDEv1* main directory from where SSONDE semantic similarity can be launched by command lines;
  * *SSONDEv1/bin*, contains the Java compiled classes; 
  * *SSONDEv1/src*, contains the Java sources for semantic similarity organized as in the following:

    _SSONDEv1/src/similarity/_, all the source code of the semantic similarity framework;  

    _SSONDEv1/src/org/_, source code of some of the library employed in the similarity code;

    _SSONDEv1/src/application/_, source code developed for specific applications. It is organized in a different directory for each application of the semantic similarity framework, for example,  in  the subdirectory EChallenges2011/, you can find the procedures extracting the list of instances on which similarity has been worked out for the application  EChallenges2011 explained in the paper (Albertoni & De Martino, 2011). Usually classes provided in this directory are indicated in the configuration file, for example, specifying "InstanceURIsClass".

  * *SSONDEv1/conf/* containing configuration files, rules files, context file, respectively in the directories test/, rules/, context/, if they are not related to any specific application, or grouped in application directories if these files are related to an application. For example, the configurations, rules, and contexts files pertaining to the aforementioned application Echallenges are in the subdirectory !SSONDEv1/conf/ EChallenges2011/;
  * *SSONDEv1/lib/* contains the libraries (Java archives, also known as JAR files) that must be included in the classpath executing the semantic similarity;
  * *SSONDEv1/data/* contains data on which the similarity has been calculated. It is organized in subdirectory, for example, EUNISIMATI/ contains the TDB store pertaining to the application Echallenges2011, in CNRIT/ different TDB store crawled by data.cnr.it. The association between stores and applications is coded in the configuration files;
  * *SSONDEv1/doc/* contains the javadoc  automatically generated by the java code.  

= Customizing the RDF Data access adding new wrappers =
Data is accessed by SSONDE through implementation of the java interface !OntologyModel.java. 
A new “wrapper” for each supported store has been developed as classes implementing the aforementioned java Interface (e.g, JENATDB.java). Thus, if new kind of store has to be supported in the SSONDE semantic similarity, a new class implementing the Java interface !OntologyModel.java, must be developed.

Besides in order to make the similarity configurable according to the new store, the novel configuration options must to be considered and managed in !OntologyModelBindingFactory.java. This class interprets what is written in the Json configuration files in order to instantiate the store from the right !OntologyModel implementation. The design of !OntologyModel, its implementation classes and !OntoloModelBindingFactory is inspired to the “Factory Pattern”.

= Customizing the output =
The class !SimilarityResults manages the output of SSONDE semantic similarity, if the developer wants to add new encoding for the output, he has to work in this class. In particular the method !SimilarityResults, writeResult, writes the output according to what is specified in the JSON configuration file. In this way, the developer can add configuration option if he adds novel kind of outputs.

= Retrieving the instances on which to apply the semantic similarity =
Method retrieving the instances before to apply the similarity is specifiable in the JSON file through InstanceURIsClass. The classes indicated there, must implement the interface !ListOfInputInstances.java. An example of this kind of class can be found in application.dataCNRit.!GetResearcher.